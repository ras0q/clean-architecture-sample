// Code generated by MockGen. DO NOT EDIT.
// Source: user_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	handler "github.com/ras0q/clean-architecture-sample/2_interface/handler"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockUserHandler) GetAll(c handler.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserHandlerMockRecorder) GetAll(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserHandler)(nil).GetAll), c)
}

// GetByID mocks base method.
func (m *MockUserHandler) GetByID(c handler.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserHandlerMockRecorder) GetByID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserHandler)(nil).GetByID), c)
}

// Register mocks base method.
func (m *MockUserHandler) Register(c handler.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserHandlerMockRecorder) Register(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserHandler)(nil).Register), c)
}
